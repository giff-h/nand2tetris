// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    Not(in=address[0], out=nAddrA);
    Not(in=address[1], out=nAddrB);
    Not(in=address[2], out=nAddrC);
    And(a=load, b=address[0], out=pinA);
    And(a=load, b=nAddrA, out=pinB);
    And(a=address[1], b=address[2], out=pinC);
    And(a=address[1], b=nAddrC, out=pinD);
    And(a=nAddrB, b=address[2], out=pinE);
    And(a=nAddrB, b=nAddrC, out=pinF);
    And(a=pinA, b=pinC, out=loadRegH);
    And(a=pinA, b=pinD, out=loadRegG);
    And(a=pinA, b=pinE, out=loadRegF);
    And(a=pinA, b=pinF, out=loadRegE);
    And(a=pinB, b=pinC, out=loadRegD);
    And(a=pinB, b=pinD, out=loadRegC);
    And(a=pinB, b=pinE, out=loadRegB);
    And(a=pinB, b=pinF, out=loadRegA);
    RAM512(in=in, load=loadRegA, address=address[3..11], out=outRegA);
    RAM512(in=in, load=loadRegB, address=address[3..11], out=outRegB);
    RAM512(in=in, load=loadRegC, address=address[3..11], out=outRegC);
    RAM512(in=in, load=loadRegD, address=address[3..11], out=outRegD);
    RAM512(in=in, load=loadRegE, address=address[3..11], out=outRegE);
    RAM512(in=in, load=loadRegF, address=address[3..11], out=outRegF);
    RAM512(in=in, load=loadRegG, address=address[3..11], out=outRegG);
    RAM512(in=in, load=loadRegH, address=address[3..11], out=outRegH);
    Mux16(a=outRegA, b=outRegB, sel=address[2], out=outRegAB);
    Mux16(a=outRegC, b=outRegD, sel=address[2], out=outRegCD);
    Mux16(a=outRegE, b=outRegF, sel=address[2], out=outRegEF);
    Mux16(a=outRegG, b=outRegH, sel=address[2], out=outRegGH);
    Mux16(a=outRegAB, b=outRegCD, sel=address[1], out=outRegAD);
    Mux16(a=outRegEF, b=outRegGH, sel=address[1], out=outRegEH);
    Mux16(a=outRegAD, b=outRegEH, sel=address[0], out=out);
}
